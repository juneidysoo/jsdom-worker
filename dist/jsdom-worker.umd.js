!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("fs"),require("node-fetch")):"function"==typeof define&&define.amd?define(["fs","node-fetch"],t):t((e=e||self).fs,e.nodeFetch)}(this,function(e,t){e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e;var n="default"in t?t.default:t;function o(e){return e=e||Object.create(null),{on:function(t,n){(e[t]||(e[t]=[])).push(n)},off:function(t,n){e[t]&&e[t].splice(e[t].indexOf(n)>>>0,1)},emit:function(t,n){(e[t]||[]).slice().map(function(e){e(n)}),(e["*"]||[]).slice().map(function(e){e(t,n)})}}}var r=function(e,t,n){return function(e,t){t=e.exports=function(){for(var e,n="",o=0;o<32;o++)e=16*t.random()|0,o>4&&o<21&&!(o%4)&&(n+="-"),n+=(12===o?4:16===o?3&e|8:e).toString(16);return n};var n=/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;t.isUUID=function(e){return n.test(e)},t.random=function(){return Math.random()}}(n={path:void 0,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}()}},n.exports),n.exports}();if(global.URL||(global.URL={}),global.URL.$$objects||(global.URL.$$objects=new Map,global.URL.createObjectURL=e=>{let t=r();return global.URL.$$objects[t]=e,"blob:http://localhost/"+t}),!global.fetch||!global.fetch.jsdomWorker){let o=global.fetch||n;global.fetch=function(n,r){return n instanceof URL&&(n=n.href),n.match(/^file:/)?new Promise((o,r)=>{o(new(global.Response||t.Response)(e.readFileSync(n.slice(7)).toString(),{status:200,statusText:"OK"}))}):n.match(/^blob:/)?new Promise((e,o)=>{let r=new FileReader;r.onload=()=>{const n=global.Response||t.Response;e(new n(r.result,{status:200,statusText:"OK"}))},r.onerror=()=>{o(r.error)};let s=n.match(/[^/]+$/)[0];r.readAsText(global.URL.$$objects[s])}):o.call(this,n,r)},global.fetch.jsdomWorker=!0}function s(e){this.type=e}global.document||(global.document={}),s.prototype.initEvent=Object,global.document.createEvent||(global.document.createEvent=function(e){return new(global[e]||s)(e)}),global.Worker=function(e){let t,n=[],r=o(),s=o(),l={onmessage:null,dispatchEvent:r.emit,addEventListener:r.on,removeEventListener:r.off,postMessage(e){s.emit("message",{data:e})},fetch:global.fetch,importScripts(){}};r.on("message",e=>{let n=l.onmessage||t("onmessage");n&&n.call(l,e)}),this.addEventListener=s.on,this.removeEventListener=s.off,this.dispatchEvent=s.emit,s.on("message",e=>{this.onmessage&&this.onmessage(e)}),this.postMessage=e=>{null!=n?n.push(e):r.emit("message",{data:e})},this.terminate=()=>{throw Error("Not Supported")},global.fetch(e).then(e=>e.text()).then(e=>{let o="var self=this,global=self";for(let e in l)o+=`,${e}=self.${e}`;t=Function(o+";\n"+e+'\nreturn function(n){return n=="onmessage"?onmessage:null;}').call(l);let r=n;n=null,r.forEach(this.postMessage)}).catch(e=>{s.emit("error",e),console.error(e)})}});
//# sourceMappingURL=jsdom-worker.umd.js.map
